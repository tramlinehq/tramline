#!/usr/bin/env ruby

require "open3"

BASE_REF = ARGV[0] || abort("Usage: ruby #{__FILE__} <base_ref>")

def w(message)
  puts "\n"
  warn "⚠️ #{message}"
end

def i(message)
  puts "\n"
  if message.is_a?(String)
    puts "ℹ️ #{message}"
  else
    puts message
  end
end

# Get PR body for skip flag
pr_body = `gh pr view #{ENV['GITHUB_REF_NAME']} --json body -q '.body' 2>/dev/null`
if pr_body&.include?('#skip-schema-lint')
  i "Skipping schema lint due to '#skip-schema-lint' in PR body"
  exit 0
end

# Get list of changed files
changed_files_output, _ = Open3.capture2("git diff --name-only origin/#{BASE_REF}...HEAD")
changed_files = changed_files_output.split("\n")
i "Changed files:\n#{changed_files.join("\n")}" if changed_files.any?

error = false

# 1. schema.rb => check for change in lib/anonymize/
expected_change_in = "lib/tasks/anonymize.rake"
if changed_files.include?("db/schema.rb")
  unless changed_files.any? { |f| f.start_with?(expected_change_in) }
    w "file=db/schema.rb changed — expected a corresponding change in #{expected_change_in}"
    error = true
  end
end

# 2. data_schema.rb => ensure older migrations have a safe return
if changed_files.include?("db/data_schema.rb")
  i "data_schema.rb changed — checking previous data migrations for safe return..."

  migrations = Dir["db/data_migrate/*.rb"].sort
  if migrations.size < 2
    i "Not enough data migrations to validate safe return logic"
  else
    latest = migrations.last
    i "Latest migration: #{File.basename(latest)}"
    previous_migrations = migrations[0...-1] || []
    previous_migrations.each do |file|
      contents = File.read(file)
      unless contents.match?(/return if|#\s*safe return/i)
        w "file=#{file} – missing 'safe return' in #{File.basename(file)}"
        error = true
      end
    end
  end
end

if error
  w "Schema linting failed due to errors in the schema or data migrations."
  exit 1
else
  i "ALL OK 👌"
end
