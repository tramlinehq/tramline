#!/usr/bin/env ruby

base_ref = ARGV[0] || abort("Usage: ruby #{__FILE__} <base_ref>")
error = false
def w(message) = warn("⚠️ #{message}")
def i(message) = message.is_a?(String) ? puts("ℹ️ #{message}") : puts(message)

# Skip lint check if the PR body contains '#skip-schema-lint'
i "Checking if schema linting should be skipped..."
bypass = "#skip-schema-lint"
pr_body = `gh pr view #{ENV["PR_NUMBER"]} --json body -q '.body' 2>/dev/null`
if pr_body&.include?(bypass)
  i "Skipping schema lint due to '#{bypass}' in PR body"
  exit 0
end

# Show list of changed files
changed_files_output = `git diff --name-only origin/#{base_ref}...HEAD`
changed_files = changed_files_output.split("\n")
i "Changed files:\n#{changed_files.join("\n")}" if changed_files.any?

# == Schema Linting (db/schema.rb) ==
# Check for change in lib/tasks/anonymize.rake
commit_shas = `git rev-list --reverse origin/#{base_ref}..HEAD`.split("\n")
schema_commits = []
anonymize_commits = []
initial_change_in = "db/schema.rb"
expected_change_in = "lib/tasks/anonymize.rake"

commit_shas.each do |sha|
  files = `git diff-tree --no-commit-id --name-only -r #{sha}`.split("\n")
  schema_commits << sha if files.include?(initial_change_in)
  anonymize_commits << sha if files.any? { |f| f.start_with?(expected_change_in) }
end

# Check if schema changes are still present in the current branch
# They could have been reverted or modified in a later commit
_diff_output = `git diff origin/#{base_ref} HEAD #{initial_change_in} | git apply --reverse --check 2>&1`
diff_still_exists = $?&.success?

# For each schema.rb-changing commit, check if there's a later commit to update lib/tasks/anonymize.rake
if diff_still_exists
  schema_commits.each do |schema_sha|
    schema_index = commit_shas.index(schema_sha)
    fixed_later = anonymize_commits.find { |anon_sha| commit_shas.index(anon_sha) >= schema_index }

    unless fixed_later
      w "file=#{initial_change_in} – changed in commit #{schema_sha} without an update in #{expected_change_in} afterward"
      error = true
    end
  end
else
  i "No changes in #{initial_change_in} since base branch #{base_ref} — skipping schema linting"
end

# == Data Migration Linting (db/data_schema.rb) ==
# Ensure older migrations have a safe return
if changed_files.include?("db/data_schema.rb")
  i "data_schema.rb changed — checking that all but the latest data migrations have a safe return..."

  migrations = Dir["db/data/*.rb"].sort
  if migrations.size < 2
    i "Not enough data migrations to validate safe return logic"
  else
    latest = migrations.last
    i "Latest migration: #{latest}"

    previous_migrations = migrations[0...-1] || []
    previous_migrations.each do |file|
      lines = File.readlines(file).map(&:strip)
      def_up_index = lines.find_index { |line| line.match?(/^def\s+up\b/) }

      if def_up_index.nil?
        w "file=#{file} – no `def up` found in #{File.basename(file)}"
        error = true
        next
      end

      next_line = lines[def_up_index + 1]
      unless next_line == "return"
        w "file=#{file} – first line inside `def up` must be `return`, but found: #{next_line.inspect}"
        error = true
      end
    end
  end
end

if error
  w "Schema linting failed due to errors in the schema or data migrations."
  exit 1
else
  i "ALL OK 👌"
end
